{"version":3,"sources":["components/Question.js","components/Answer.js","Utils/helperFunctions.js","App.js","index.js"],"names":["Question","question","handleAnswerChange","submit","answer","className","id","type","min","value","onChange","onClick","icon","faPaperPlane","itemprop","src","alt","Answer","forward","class","currentScore","currentAnswer","Math","round","average","arr","map","x","parseInt","reduce","a","b","length","score","percentdiff","abs","App","useState","setQuestion","questions","setQuestions","setAnswer","displayAnswer","setDisplayAnswers","url","useEffect","axios","result","data","fetchData","object","find","newObject","answers","concat","put","event","preventDefault","target","quizPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b8c0b60.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faPaperPlane} from '@fortawesome/free-solid-svg-icons'\nimport '../App.css';\n\nconst Question = ({question , handleAnswerChange, submit, answer}) => {\n    return (\n        <div className=\"card\">\n            <div className=\"row\">\n                <h2>Question {question.id}</h2>\n                <h3>{question.question}</h3>\n            </div>\n            <div className=\"row\">\n                <input type=\"number\" min=\"0\"\n                     value={answer} onChange={handleAnswerChange}/>\n                <button className=\"answer-button\" onClick={submit}>\n                <FontAwesomeIcon icon={faPaperPlane} />\n                </button>\n            </div>\n            <img itemprop=\"contentURL\" src={question.src} alt={question.src}></img>\n        </div>\n    );\n};\n\nexport default Question;","import React from 'react';\n\n\nconst Answer = ({question, forward}) => {\n\n    return (        \n        <div class=\"card\">\n            <h1>You scored {question.currentScore} points</h1>\n            <h3>You think the answer is {question.currentAnswer}</h3>\n            <h3>Most people think the answer is: {Math.round(question.average)}</h3>\n            <button onClick={forward} className=\"skip-button\">Next question</button>\n        </div>\n    )\n}\n\n\n\nexport default Answer;","export const average = (arr) => {\n  return (arr.map((x) => parseInt(x)).reduce((a, b) => a + b)) / (arr.length);\n};\n\nexport const score = (answer, average) => {\n  const diff = Math.abs(answer - average);\n  const percentdiff = (diff / average) * 100;\n  if (percentdiff < 10) {\n    return 10;\n  } if (percentdiff < 25) {\n    return 5;\n  } if (percentdiff < 50) {\n    return 1;\n  }\n  return 0;\n};\n","/* eslint-disable no-shadow */\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Question from './components/Question';\nimport Answer from './components/Answer';\nimport {\n  score,\n  average,\n} from './Utils/helperFunctions';\n\nfunction App() {\n  const [question, setQuestion] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState(0);\n  const [displayAnswer, setDisplayAnswers] = useState(false);\n\n  const url = 'http://localhost:3001/questions/';\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        url,\n      );\n      setQuestions(result.data);\n    };\n    fetchData();\n  }, []);\n\n  const startPage = () => (\n    // eslint-disable-next-line react/jsx-filename-extension\n    <div className=\"card\">\n      <div className=\"row\">\n        <h2>How to play:</h2>\n        <p>\n          The game is not to guess the correct answer but to guess the answer that most people think!\n          We will compare your answers to the average from the population.\n        </p>\n      </div>\n      <div className=\"row\">\n        <h2>Scoring:</h2>\n        <ul>\n          <li> Within 10% of the average: 10pts</li>\n          <li> Within 25% of the average: 5pts</li>\n          <li> Within 50% of the average: 1pts</li>\n        </ul>\n      </div>\n      <div className=\"row\">\n        <button className=\"start-button\" type=\"submit\" onClick={() => setQuestion(1)}> Start the quiz!</button>\n      </div>\n    </div>\n  );\n\n  const quizPage = () => {\n    const forward = () => {\n      setQuestion(question + 1);\n      setDisplayAnswers(false);\n    };\n    const submit = async () => {\n      const { id } = questions[question - 1];\n      const object = questions.find((x) => x.id === id);\n      const newObject = {\n        ...object,\n        answers: object.answers.concat(answer),\n        average: average(object.answers),\n        currentAnswer: answer,\n        currentScore: score(answer, average(object.answers)),\n      };\n      await axios.put(url + id, newObject);\n      setQuestions(questions.map((x) => (x.id === id ? newObject : x)));\n      setDisplayAnswers(true);\n      setAnswer(0);\n    };\n    const handleAnswerChange = (event) => {\n      event.preventDefault();\n      setAnswer(event.target.value);\n    };\n    const displayQuestion = () => (\n      <div>\n        <Question\n          forward={forward}\n          question={questions[question - 1]}\n          handleAnswerChange={handleAnswerChange}\n          submit={submit}\n          answer={answer}\n        />\n      </div>\n    );\n    const displayResult = () => (\n      <div>\n        <Answer\n          forward={forward}\n          question={questions[question - 1]}\n        />\n      </div>\n    );\n    return (\n      <div>\n        {displayAnswer === false ? displayQuestion() : displayResult()}\n      </div>\n    );\n  };\n  const endPage = () => {\n    const countScore = (arr) => arr.reduce((a, b) => a + b.currentScore, 0);\n    return (\n      <div className=\"card\">\n        <h3>\n          You scored\n          {' '}\n          {countScore(questions)}\n          {' '}\n          points!\n        </h3>\n        <h3>Thanks for playing</h3>\n        <button className=\"start-button\" type=\"submit\" onClick={() => setQuestion(0)}>Play again</button>\n      </div>\n    );\n  };\n  return (\n    <div className=\"box-container\">\n      <header>\n        <h1>What most people think?</h1>\n      </header>\n      {question === 0 ? startPage()\n        : question > 0 && question < questions.length + 1 ? quizPage() : endPage()}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}